// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./prisma/generated/"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  admin
  member
}

enum Status {
  pending
  in_progress
  completed
}

enum Priority {
  high
  medium
  low
}

model User {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  password   String
  role       Roles    @default(member)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  teams       TeamMember[]  @relation("TeamsList")
  tasks       Task[]        @relation("UserTasks")
  taskHistory TaskHistory[] @relation("TaskChanges")

  @@map("users")
}

model Team {
  id          String   @id @default(uuid())
  name        String
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  userMembers TeamMember[] @relation("MembersList")
  teamTask    Task[]       @relation("TeamTasks")

  @@map("teams")
}

model TeamMember {
  id String @id @default(uuid())

  user    User   @relation("TeamsList", fields: [user_id], references: [id])
  user_id String

  team    Team   @relation("MembersList", fields: [team_id], references: [id])
  team_id String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([user_id, team_id])
  @@map("team_members")
}

model Task {
  id          String   @id @default(uuid())
  title       String
  description String
  status      Status
  priority    Priority

  user        User   @relation("UserTasks", fields: [assigned_to], references: [id])
  assigned_to String

  team    Team   @relation("TeamTasks", fields: [team_id], references: [id])
  team_id String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  taskHistory TaskHistory[] @relation("HistoryLog")

  @@map("tasks")
}

model TaskHistory {
  id String @id @default(uuid())

  task    Task   @relation("HistoryLog", fields: [task_id], references: [id])
  task_id String

  user       User   @relation("TaskChanges", fields: [changed_by], references: [id])
  changed_by String

  old_status Status
  new_status Status
  changed_at DateTime @default(now())

  @@map("task_history")
}
